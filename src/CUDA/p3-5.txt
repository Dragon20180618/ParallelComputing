$export CUDA_LAUNCH_BLOCKING=1
这样设置之后，所有核函数的调用都不再是异步的， 而是同步的。
会影响程序性能，

error.cuh:

#pragma once
#include<stdio.h>

#define CHECK(call)\
do\
{
    const cudaError_t error_code = call;\
    if(error_code!=cudaSuccess){\
        printf("CUDA Error:\n");\
        printf(" File: %s\n",__FILE__);\
        printf(" Line: %d\n",__LINE__);\
        printf(" Error code: %d\n",error_code);\
        printf(" Error text: %s\n",cudaGetErrorString(error_code));\
        exit(1);\
    }\
}while(0);

CUDA自带检查工具集 CUDA-MEMCHECK
$ cuda-memcheck --tool memcheck [options] app_name [options]
$ cuda-memcheck --tool racecheck [options] app_name [options]
$ cuda-memcheck --tool initcheck [options] app_name [options]
$ cuda-memcheck --tool synccheck [options] app_name [options]

memcheck工具可以省略 --tool memcheck
变为:
$ cuda-memcheck [options] app_name [options]

如 $ cuda-memcheck ./a.out

$ nvprof ./a.out
如果用上述命令时遇到了类似如下的错误提示：
54 CUDA 编程：基础与实践
Unable to profile application. Unified Memory profiling failed
则可以尝试将运行命令换为：
$ nvprof --unified-memory-profiling off ./a.out

提高GPU加速比的办法：
减少主机与设备之间的数据传输；
提高核函数的算术强度；
增大核函数的并行规模。

一块 GPU 一共可以驻留几万到几十万个线程。如果一个核函数中定义的线程数目远小于这个数的话，就不可能
得到很高的加速比。