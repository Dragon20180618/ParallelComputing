在伏特架构之前，一个线程束中的线程拥有同一个程序计数器（program counter），但
各自有不同的寄存器状态（register state），从而可以根据程序的逻辑判断选择不同的分支。
选择结构将导致逻辑分支，一个线程束的线程，在同一时刻只能执行一个共同的指令或闲置。
eg:
	if(condition)
	{
		A;
	}
	else
	{
		B;
	}
同一线程束首先运行A，暂停B；A运行完后运行B
程序分支将导致程序效率大大降低。

从伏特架构开始，引入了独立线程调度（Independent Thread Scheduling）机制。每个
线程有自己的程序计数器。

为了实现独立线程调度机制，一个代价是增加了寄存器负担：单个线程的程序计数器
一般需要使用两个寄存器。